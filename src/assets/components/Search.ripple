import { track, effect } from 'ripple';
import { SelectedUnitsContext } from "../../App.ripple"

export default component Search () {

    const selectedUnits = SelectedUnitsContext.get()

    let searchTerm = track("")
    let selectedLocation = track({})
    let data = track({})
    
    effect(() => {


        async function getGeocoding() {

            const BASE_API_URL = "https://geocoding-api.open-meteo.com/v1/search"

            const res = await fetch(BASE_API_URL + "?name=" + @searchTerm);

            @data = await res.json()

            console.log(@data)

        }

        getGeocoding()

    })

    function handleClickOnLocation(location) {

        @searchTerm = ""
        @selectedLocation = location

    }

    function handleSearchClick() {

        if (Object.keys(@selectedLocation).length > 0) {

            selectedUnits.@locationLatitude = @selectedLocation?.latitude
            selectedUnits.@locationLongitude = @selectedLocation?.longitude
            selectedUnits.@locationName = @selectedLocation?.name + ", " + @selectedLocation?.country
        }
    }

    <section>

        <input 
            type="text"
            placeholder="Search for a place..."
            value={
                @selectedLocation?.name !== undefined && @selectedLocation?.country !== undefined && @selectedLocation?.timezone !== undefined
                ? (@selectedLocation?.name + ", " + @selectedLocation?.country + ", " + @selectedLocation?.timezone)
                : @searchTerm
            }
            onInput={(e) => @searchTerm = e.target.value} 
        />

        <button onClick={() => handleSearchClick()}>
            {'Search'}
        </button>

        if (@data?.results) {

            <dialog>
            for (let location of @data?.results ; index i) {
                <p onClick={() => handleClickOnLocation(location)}>
                    {location?.name + ", " + location?.country + ", " + location?.timezone}
                </p>
            }
            </dialog>
        }

    </section>


    <style>
        section {
            position: relative;
            max-width: 656px;
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            gap: 16px;
        }

        input {
            /* max-width: 562px; */
            width: 100%;
            height: 56px;
            padding: 16px 24px;
            border-radius: 12px;
            background-color: #262540;
            color: #D4D3D9;
        }

        button {
            /* max-width: 114px; */
            width: 100%;
            height: 56px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 12px;
            background-color: #4658D9;
            color: white;
        }

        button:hover {
            cursor: pointer;
            background-color: #2B1B9C;
        }

        dialog {
            max-width: 655px;
            width: 100%;
            background-color: #262540;
            border: 1px solid #302F4A;
            border-radius: 12px;
            position: absolute;
            padding: 8px;
            top: 70px;
            left: 0;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        dialog p {
            width: 100%;
            height: 39px;
            padding: 10px 8px;
            border: 1px solid transparent;
            color: white;
            display: flex;
            align-items: center;
        }

        dialog p:hover {
            background-color: #302F4A;
            border: 1px solid #3C3B5E;
            border-radius: 8px;
            cursor: pointer;
        }

        @media (min-width: 710px) {
            section {
                flex-direction: row;
            }

            input {
                max-width: 562px;
            }

            button {
                max-width: 114px;
            }

            dialog {
                max-width: 526px;
                width: 100%;
            }
        }
    </style>
}